<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C# on Scott Guymer</title>
    <link>https://www.scottguymer.co.uk/categories/c#/</link>
    <description>Recent content in C# on Scott Guymer</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>© This post is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License，please give source if you wish to quote or reproduce.</copyright>
    <lastBuildDate>Mon, 12 Mar 2018 10:53:21 +0000</lastBuildDate>
    
	<atom:link href="https://www.scottguymer.co.uk/categories/c#/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Unit testing complex LINQ statements</title>
      <link>https://www.scottguymer.co.uk/blog/making-linq-testable-in-isolation/</link>
      <pubDate>Mon, 12 Mar 2018 10:53:21 +0000</pubDate>
      
      <guid>https://www.scottguymer.co.uk/blog/making-linq-testable-in-isolation/</guid>
      <description>LINQ is amongst the greatest features of c# and when it was released people instantly took to using it. It forms the basis of may ORMs and other object manipulation tools. It can form a great abstraction when loading and manipulating data.
It can however like a lot of great tools be horrendously misused by a lot of people. I have seen 10+ line LINQ statements dropped into the middle of large blocks of business logic.</description>
    </item>
    
  </channel>
</rss>